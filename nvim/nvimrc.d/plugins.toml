[[plugins]]
# A colorscheme
repo = 'sainnhe/gruvbox-material'
hook_add = '''
    augroup dein-color-scheme
      autocmd!
      autocmd VimEnter * nested colorscheme gruvbox-material
    augroup END
'''

[[plugins]]
# For :DeinUpdate.
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
# Lua library for nvim.
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
# Language Server config.
repo = 'neovim/nvim-lspconfig'

[[plugins]]
# Completion plugin.
repo = 'ms-jpq/coq_nvim'
rev = 'coq'

[[plugins]]
# Bundled data for coq_nvim.
repo = 'ms-jpq/coq.artifacts'
rev = 'artifacts'

[[plugins]]
# Outline viewer.
repo = 'stevearc/aerial.nvim'

[[plugins]]
# A plugin for Debugger Adapter Protocol.
repo = 'mfussenegger/nvim-dap'
hook_add = '''
    nnoremap <F5>  <Cmd>lua require('dap').continue()<CR>
    nnoremap <F10> <Cmd>lua require('dap').step_over()<CR>
    nnoremap <F11> <Cmd>lua require('dap').step_into()<CR>
    nnoremap <F12> <Cmd>lua require('dap').step_out()<CR>

    nnoremap <Leader>db <Cmd>lua require('dap').toggle_breakpoint()<CR>
    nnoremap <Leader>dc <Cmd>lua require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
'''

[[plugins]]
# A plugin for DAP UI.
repo = 'rcarriga/nvim-dap-ui'
depends = ['mfussenegger/nvim-dap']
hook_add = '''
lua <<EOF
    local ok, dap = pcall(require, 'dap')
    if ok then
        dapui = require('dapui')
        dapui.setup()

        dap = require('dap')
        dap.listeners.before['event_initialized']['custom'] = function(session, body)
            dapui.open()
        end
        dap.listeners.before['event_terminated']['custom'] = function(session, body)
            dapui.close()
        end
    end
EOF
'''

[[plugins]]
# A plugin for DAP UI.
repo = 'theHamsta/nvim-dap-virtual-text'
depends = ['mfussenegger/nvim-dap']
hook_add = '''
    lua require('nvim-dap-virtual-text').setup()
'''

[[plugins]]
# A fuzzy finder.
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
    nnoremap <Leader>ff <Cmd>Telescope find_files<CR>
    nnoremap <Leader>fg <Cmd>Telescope live_grep<CR>
    nnoremap <Leader>fb <Cmd>Telescope buffers<CR>
    nnoremap <Leader>fh <Cmd>Telescope help_tags<CR>
'''

[[plugins]]
# A filer
repo = 'lambdalisue/fern.vim'
hook_add = '''
    nnoremap <silent> <Leader>nf :Fern . -reveal=%<CR>
'''

[[plugins]]
# A fern plugin
repo = 'lambdalisue/fern-git-status.vim'
depends = ['lambdalisue/fern.vim']

[[plugins]]
# EditorConfig plugin.
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
# Displays the indention levels with thin vertical lines.
repo = 'Yggdroot/indentLine'

[[plugins]]
# Handles extra whitespaces.
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
# Shows a git diff in the gutter (sign column) and stages/undoes hunks.
repo = 'airblade/vim-gitgutter'

[[plugins]]
# Detects file type under the cursor according to context.
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# Syntax highlighting for context.
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
# Git in vim.
repo = 'tpope/vim-fugitive'

[[plugins]]
# Better word object handling.
repo = 'tpope/vim-surround'

[[plugins]]
# Better '.' command.
repo = 'tpope/vim-repeat'

[[plugins]]
# A comment-out plugin.
repo = 'tpope/vim-commentary'

[[plugins]]
# A solid language pack (syntax, indent, etc).
repo = 'sheerun/vim-polyglot'

[[plugins]]
# A better spell checker.
repo = 'kamykn/spelunker.vim'
hook_add = '''
    set nospell  " Turn off builtin spellcheck.

    let g:spelunker_check_type = 2  " Real time spell checking.
    let g:spelunker_disable_uri_checking = 1
    let g:spelunker_disable_email_checking = 1
    let g:spelunker_disable_acronym_checking = 1
    let g:spelunker_disable_backquoted_checking = 1

    " After enabling a colorscheme these highlight groups are cleared.
    " This augroup explicitly enables highlight groups.
    augroup spelunker-colorscheme
        autocmd ColorScheme *
        \ highlight SpelunkerSpellBad cterm=underline ctermfg=247 gui=underline guifg=#9e9e9e |
        \ highlight SpelunkerComplexOrCompoundWord cterm=underline ctermfg=NONE gui=underline guifg=NONE
    augroup END

    let g:spelunker_white_list_for_user = [
        \ 'args',
        \ 'backend',
        \ 'coord',
        \ 'okta',
        \ 'terraform',
        \ 'unmarshal',
        \ ]
'''

[[plugins]]
repo = 'ShikChen/osc52.vim'
hook_add = '''
    augroup osc52
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call SendViaOSC52(getreg(v:event.regname)) | endif
    augroup END
'''

